package com.malware.malwareanalyzer;

import android.app.ProgressDialog;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.os.AsyncTask;
import android.os.Environment;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.Toast;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

public class AppList extends AppCompatActivity {

    public PackageManager pm;
    List<ApplicationInfo> installedApps;
    ListView appsList;
    ListAdapter adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_app_list);

        appsList = (ListView)findViewById(R.id.apps_list);

        new LoadApplicationList().execute();

        appsList.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {

                ApplicationInfo appInfo = installedApps.get(position);
                Log.v("Source Dir", appInfo.sourceDir);
                Log.v("Public Source Dir", appInfo.publicSourceDir);
                new copyAPK().execute(appInfo, null, null);
                return false;
            }
        });


        appsList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                ApplicationInfo appInfo = installedApps.get(position);

                PackageManager pm = getPackageManager();
                Bundle bundle = new Bundle();
                try {
                    PackageInfo pkgInfoPermissions = pm.getPackageInfo(appInfo.packageName,
                            PackageManager.GET_PERMISSIONS);
                    String[] appPermissions = pkgInfoPermissions.requestedPermissions;
                    bundle.putStringArray("permissions", appPermissions);

                    System.out.println("**************"+appInfo.loadLabel(pm));

                    PackageInfo pkgInfoSignatures = pm.getPackageInfo(appInfo.packageName,
                            PackageManager.GET_SIGNATURES);
                    Signature[] appSignatures = pkgInfoSignatures.signatures;
                    byte[] cert = appSignatures[0].toByteArray();
                    bundle.putString("signature", computeFingerPrint(cert));


                    Intent i = new Intent(AppList.this, AnalyzeApp.class);
                    i.putExtras(bundle);
                    i.putExtra("name",appInfo.loadLabel(pm));
                    startActivity(i);

                }catch (PackageManager.NameNotFoundException e){
                    e.printStackTrace();
                }

            }
        });

    }


    public String computeFingerPrint(final byte[] certRaw) {

        String strResult = "";

        MessageDigest md;
        try {
            md = MessageDigest.getInstance("SHA256");
            md.update(certRaw);
            for (byte b : md.digest()) {
                String strAppend = Integer.toString(b & 0xff, 16);
                if (strAppend.length() == 1)
                    strResult += "0";
                strResult += strAppend;
            }
            //strResult = strResult.toUpperCase();
        }
        catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }

        return strResult;
    }


    private List<ApplicationInfo> filterApplications(List<ApplicationInfo> list){

        List<ApplicationInfo> filteredAppList = new ArrayList<>();

        for(ApplicationInfo i : list){
            try {
                PackageInfo pi = getPackageManager().getPackageInfo(i.packageName, PackageManager.GET_PERMISSIONS);
                if( (pi.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0){
                    filteredAppList.add(i);
                }

            }catch (PackageManager.NameNotFoundException e){
                e.printStackTrace();
            }
        }

        return filteredAppList;
    }

    private class LoadApplicationList extends AsyncTask<Void, Void, Void>{

        private ProgressDialog progressDialog;

        @Override
        protected Void doInBackground(Void... params) {
            pm = getPackageManager();
            installedApps = filterApplications(pm.getInstalledApplications(PackageManager.GET_META_DATA));

            adapter = new appListAdapter(getApplicationContext(), R.layout.adapter_app_list, installedApps);

            //appsList.setAdapter(adapter);
            return null;
        }

        @Override
        protected void onPreExecute() {
            progressDialog = ProgressDialog.show(AppList.this, null, "Loading Installed Application...");

            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            appsList.setAdapter(adapter);
            progressDialog.dismiss();
            super.onPostExecute(aVoid);

        }
    }

    private class copyAPK extends AsyncTask<ApplicationInfo, Void, Void>{

        private ProgressDialog progressDialog;
        private String path;
        @Override
        protected void onPreExecute() {
            progressDialog = ProgressDialog.show(AppList.this, null, "Saving APK of the app...");
            super.onPreExecute();
        }

        @Override
        protected Void doInBackground(ApplicationInfo... params) {
            ApplicationInfo appInfo = params[0];

            File fromFile = new File(appInfo.publicSourceDir);
            String fileName = appInfo.packageName.replace(".","");

            try {
                File toFile;
                String info = Environment.getExternalStorageState();
                if (info.equals(Environment.MEDIA_MOUNTED)) {
                    toFile = new File(Environment
                            .getExternalStorageDirectory()
                            .toString()
                            + "/AppAndApks");

                } else {
                    toFile = getCacheDir();
                }
                if (!toFile.exists())
                    toFile.mkdirs();
                toFile = new File(toFile.getPath() + "/" + fileName
                        + ".apk");
                path = toFile.getPath();
                Log.v("Saving To", path);

                toFile.createNewFile();
                Log.v("openFile", "Opening toFile");
                InputStream in = new FileInputStream(fromFile);
                Log.v("openFile", "Opening fromFile");
                OutputStream out = new FileOutputStream(toFile);
                byte[] bf = new byte[1024];
                int len;
                while ((len = in.read(bf)) > 0) {
                    out.write(bf, 0, len);
                }
                in.close();
                out.close();

            } catch (FileNotFoundException ex) {
                System.out.println(ex.getMessage()
                        + " in the specified directory.");
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }

            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            progressDialog.dismiss();
            Toast.makeText(getApplicationContext(), "Saved APK at " + path, Toast.LENGTH_LONG).show();
            super.onPostExecute(aVoid);
        }
    }
}
